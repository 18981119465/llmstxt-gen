name: Release Automation

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string
      release_notes:
        description: 'Release notes'
        required: false
        type: string

jobs:
  # Create Release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        pip install build twine
        
    - name: Determine version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV
        
    - name: Build Python package
      run: |
        cd backend
        python -m build
        
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.RELEASE_VERSION }}
        release_name: Release ${{ env.RELEASE_VERSION }}
        body: |
          ## Release ${{ env.RELEASE_VERSION }}
          
          ${{ github.event.inputs.release_notes || 'Automated release' }}
          
          ### Changes
          ${{ steps.changelog.outputs.changes }}
          
          ### Installation
          ```bash
          pip install llms-txt-gen==${{ env.RELEASE_VERSION }}
          ```
        draft: false
        prerelease: false
        
    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: ./backend/dist/llms-txt-gen-${{ env.RELEASE_VERSION }}.tar.gz
        asset_name: llms-txt-gen-${{ env.RELEASE_VERSION }}.tar.gz
        asset_content_type: application/gzip

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: create-release
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: '1.28.0'
        
    - name: Configure kubeconfig
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBECONFIG }}" > $HOME/.kube/config
        
    - name: Deploy to Kubernetes
      run: |
        kubectl apply -f k8s/
        kubectl rollout status deployment/llms-txt-gen-backend
        kubectl rollout status deployment/llms-txt-gen-frontend
        
    - name: Run smoke tests
      run: |
        sleep 30
        kubectl get pods
        kubectl logs deployment/llms-txt-gen-backend --tail=50

  # Update Documentation
  update-docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
    - name: Checkout documentation
      uses: actions/checkout@v4
      with:
        repository: '${{ github.repository }}-docs'
        token: ${{ secrets.DOCS_TOKEN }}
        
    - name: Update version
      run: |
        echo "Updating documentation to version ${{ env.RELEASE_VERSION }}"
        # Add documentation update commands here
        
    - name: Commit and push documentation updates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .
        git commit -m "docs: Update documentation for ${{ env.RELEASE_VERSION }}"
        git push